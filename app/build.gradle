import groovy.io.FileType

import javax.crypto.Cipher
import javax.crypto.SecretKey
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

ext {
    // Whether The Theme Assets Should Be Encrypted Or Not
    SHOULD_ENCRYPT_ASSETS = false

    // Whether This Theme Supports Third Party Theme Systems
    SUPPORTS_THIRD_PARTY_SYSTEMS = false

    // Substratum Internal Values : Do Not Touch
    byte[] key = new byte[16]
    new Random().nextBytes(key)
    KEY = key
    byte[] iv = new byte[16]
    new Random().nextBytes(iv)
    IV_KEY = iv
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "com.doomy.pixelize"
        minSdkVersion 24
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        buildConfigField "String", "IV_KEY", "\"" + IV_KEY + "\""
        buildConfigField "byte[]", "DECRYPTION_KEY", String.valueOf("\"" + KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        buildConfigField "byte[]", "IV_KEY", String.valueOf("\"" + IV_KEY + "\"").replace("\"", "").replace("[", "{").replace("]", "}")
        resValue "string", "encryption_status", (shouldEncrypt() ? "onCompileVerify" : "false")

        buildConfigField "boolean", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "" + SUPPORTS_THIRD_PARTY_SYSTEMS
        resValue "bool", "SUPPORTS_THIRD_PARTY_THEME_SYSTEMS", "" + SUPPORTS_THIRD_PARTY_SYSTEMS
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.github.javiersantos:PiracyChecker:1.1'
    compile("org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version") {
        transitive = true
    }
}

task encryptAssets {
    if (!shouldEncrypt()) {
        println("Skipping Assets Encryption...")
        return
    }

    def temp = new File(getProjectDir(), "/src/main/assets-temp")
    if (!temp.exists()) {
        println("Encrypting Assets...")
        def list = []
        def dir = new File(getProjectDir(), "/src/main/assets")
        dir.eachFileRecurse(FileType.FILES) { asset ->
            list << asset

            FileInputStream fis = new FileInputStream(asset)
            File file = new File(asset.getAbsolutePath().replace("assets", "assets-temp"))
            file.getParentFile().mkdirs()
            FileOutputStream fos = new FileOutputStream(file)
            byte[] buffer = new byte[4096]
            int i
            while ((i = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, i)
            }
            fis.close()
            fos.close()
        }

        list.each {
            if (it.getAbsolutePath().contains("overlays")) {
                Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
                SecretKey secret = new SecretKeySpec(KEY, "AES")
                IvParameterSpec iv = new IvParameterSpec(IV_KEY)

                cipher.init(Cipher.ENCRYPT_MODE, secret, iv)
                FileInputStream fis = new FileInputStream(it)
                FileOutputStream fos = new FileOutputStream(it.getAbsolutePath() + ".enc")

                byte[] input = new byte[64]
                int bytes
                while ((bytes = fis.read(input)) != -1) {
                    byte[] output = cipher.update(input, 0, bytes)
                    if (output != null) {
                        fos.write(output)
                    }
                }
                byte[] output = cipher.doFinal()
                if (output != null) {
                    fos.write(output)
                }
                fis.close()
                fos.flush()
                fos.close()

                it.delete()
            }
        }
    } else {
        throw new RuntimeException("Old Temporary Assets Found ! Try To Do A Clean Project")
    }
}

project.afterEvaluate {
    preBuild.dependsOn encryptAssets
}

gradle.buildFinished {
    def temp = new File(getProjectDir(), "/src/main/assets-temp")
    if (temp.exists()) {
        println("Cleaning Encrypted Assets...")
        def encrypt = new File(getProjectDir(), "src/main/assets")
        encrypt.deleteDir()

        temp.eachFileRecurse (FileType.FILES) { asset ->
            FileInputStream fis = new FileInputStream(asset)
            File file = new File(asset.getAbsolutePath().replace("assets-temp", "assets"))
            file.getParentFile().mkdirs()
            FileOutputStream fos = new FileOutputStream(file)
            byte[] buffer = new byte[4096]
            int i
            while ((i = fis.read(buffer)) != -1) {
                fos.write(buffer, 0, i)
            }
            fis.close()
            fos.close()
        }
        temp.deleteDir()
    }
}

boolean shouldEncrypt() {
    ArrayList<String> tasks = project.gradle.startParameter.taskNames
    return SHOULD_ENCRYPT_ASSETS && Arrays.toString(tasks).toLowerCase().contains("release")
}

repositories {
    mavenCentral()
}
